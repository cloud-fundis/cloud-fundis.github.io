<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on because there are just too many things to remember</title>
    <link>https://cloud-fundis.github.io/tags/shell/</link>
    <description>Recent content in shell on because there are just too many things to remember</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2020 16:20:39 +0200</lastBuildDate>
    
	<atom:link href="https://cloud-fundis.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lessons 10 through 12</title>
      <link>https://cloud-fundis.github.io/lessons/jq/jq4/</link>
      <pubDate>Tue, 12 May 2020 16:20:39 +0200</pubDate>
      
      <guid>https://cloud-fundis.github.io/lessons/jq/jq4/</guid>
      <description>last time on jq Another way of producing a text list of running instances may be to push the fields we want though another jq function - join.
Lesson 10 Using functions There are a number of useful functions in jq that will make life a little easier. Let&amp;rsquo;s explore some of them.
join A function to join an array into a string. Whereas before we created a string using String iterpolation, we could simply use join.</description>
    </item>
    
    <item>
      <title>jq - lessons 3 to 6</title>
      <link>https://cloud-fundis.github.io/lessons/jq/jq2/</link>
      <pubDate>Tue, 05 May 2020 14:41:29 +0200</pubDate>
      
      <guid>https://cloud-fundis.github.io/lessons/jq/jq2/</guid>
      <description>Previously on jq &amp;hellip; aws ec2 describe-instances | jq &#39;.Reservations[].Instances[] | keys&#39;  shows us all the keys for all the Reservations for all the Instances I have launched in AWS.
Perhaps we wish to know what the state of the instances are?
I see there&amp;rsquo;s a State in the resulting keys. Perhaps that has the state of all instances.
Lesson 3 JSON is case sensitive JSON is case sensitive, so</description>
    </item>
    
    <item>
      <title>jq - lesson N - the N&#39;d game</title>
      <link>https://cloud-fundis.github.io/lessons/jq/lesson-n/</link>
      <pubDate>Tue, 05 May 2020 12:55:16 +0200</pubDate>
      
      <guid>https://cloud-fundis.github.io/lessons/jq/lesson-n/</guid>
      <description>After all your learnings and this series, we&amp;rsquo;re trying to get to understand and write jq like the one below. It&amp;rsquo;s a culmination of our learnings:
jq &#39;def dotkeys: def stringify: map(tostring) | join(&amp;quot;.&amp;quot;); . as $in | reduce paths(scalars) as $p (null; ($in|getpath($p)) as $v | setpath([$p|stringify]; $v)); def chain(key): .[key] |= dotkeys ; chain(&amp;quot;AParticularNestedKey&amp;quot;)&#39; Yup, this looks terrible to me. Guess there&amp;rsquo;s a lot I need to learn here!</description>
    </item>
    
    <item>
      <title>jq - first steps: a journey worth taking</title>
      <link>https://cloud-fundis.github.io/lessons/jq/jq1/</link>
      <pubDate>Mon, 04 May 2020 11:32:20 +0200</pubDate>
      
      <guid>https://cloud-fundis.github.io/lessons/jq/jq1/</guid>
      <description>When I started at AWS, I&amp;rsquo;d never heard of jq before. Of course, I&amp;rsquo;d not been exposed to a lot of JSON either, so it&amp;rsquo;s not surprising I didn&amp;rsquo;t know it or how unbelievably powerful it is.
This is a series of indefinite length that focusts on jq. Bascially, the man page is way too concise to be terribly helpful. This series will aim to fulfil two roles:
 To give practical examples of using jq, To act as a bit of a cookbook for &amp;lsquo;common&amp;rsquo; usecases.</description>
    </item>
    
  </channel>
</rss>