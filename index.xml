<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>because there are just too many things to remember</title>
    <link>https://cloud-fundis.github.io/</link>
    <description>Recent content on because there are just too many things to remember</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 May 2020 14:41:29 +0200</lastBuildDate>
    
        <atom:link href="https://cloud-fundis.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>jq - lessons 3 to 6</title>
        <link>https://cloud-fundis.github.io/lessons/jq/jq2/</link>
        <pubDate>Tue, 05 May 2020 14:41:29 +0200</pubDate>
        
        <guid>https://cloud-fundis.github.io/lessons/jq/jq2/</guid>
        <description>because there are just too many things to remember https://cloud-fundis.github.io/lessons/jq/jq2/ -

&lt;h1 id=&#34;previously-lessons-jq-jq1-on-jq&#34;&gt;&lt;a href=&#34;https://cloud-fundis.github.io/lessons/jq/jq1&#34;&gt;Previously&lt;/a&gt; on &lt;em&gt;jq&lt;/em&gt; &amp;hellip;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations[].Instances[] | keys&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;shows us all the keys for all the &lt;em&gt;Reservations&lt;/em&gt; for all the &lt;em&gt;Instances&lt;/em&gt; I have launched in AWS.&lt;/p&gt;

&lt;p&gt;Perhaps we wish to know what the state of the instances are?&lt;/p&gt;

&lt;p&gt;I see there&amp;rsquo;s a &lt;strong&gt;State&lt;/strong&gt; in the resulting keys. Perhaps that has the state of all instances.&lt;/p&gt;

&lt;h2 id=&#34;lesson-3&#34;&gt;Lesson 3&lt;/h2&gt;

&lt;h3 id=&#34;json-is-case-sensitive&#34;&gt;JSON is case sensitive&lt;/h3&gt;

&lt;p&gt;JSON is case sensitive, so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations[].Instances[].state&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns nothing, while&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations[].Instances[].State&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Code&amp;quot;: 80,
  &amp;quot;Name&amp;quot;: &amp;quot;stopped&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok. Cool. I only have one instance launched here, so this shows only one instance in a stopped state.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;jq&lt;/em&gt; terminology, we&amp;rsquo;ve applied a filter to this data. First we applied a filter of all Reservations, then all Instances and finally a filter of &lt;em&gt;State&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If I look in an account of one of our customers, then I see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Code&amp;quot;: 16,
  &amp;quot;Name&amp;quot;: &amp;quot;running&amp;quot;
}
{
  &amp;quot;Code&amp;quot;: 16,
  &amp;quot;Name&amp;quot;: &amp;quot;running&amp;quot;
}
{
  &amp;quot;Code&amp;quot;: 80,
  &amp;quot;Name&amp;quot;: &amp;quot;stopped&amp;quot;
}
{
  &amp;quot;Code&amp;quot;: 16,
  &amp;quot;Name&amp;quot;: &amp;quot;running&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice, though, that&amp;rsquo;s only partially useful, because I would like to know what the instanceId&amp;rsquo;s are of the running and stopped instances.&lt;/p&gt;

&lt;h2 id=&#34;lesson-4&#34;&gt;Lesson 4&lt;/h2&gt;

&lt;h3 id=&#34;retriving-more-than-a-single-key-at-once&#34;&gt;Retriving more than a single key at once&lt;/h3&gt;

&lt;p&gt;We could loop through this and do the aws call multiple times, retrieving the instanceId first and then&amp;hellip;.BARF&amp;hellip;Urgh, just writing that sentence make me sick.&lt;/p&gt;

&lt;p&gt;There &lt;strong&gt;MUST&lt;/strong&gt; be a better way?&lt;/p&gt;

&lt;p&gt;Indeed. If we pipe ( | ) [we saw this used in an earlier lesson right?] the output of the &lt;em&gt;.Reservations[].Instances[]&lt;/em&gt; and &amp;lsquo;grab&amp;rsquo; the keys we&amp;rsquo;re interested in, then that would work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations[].Instances[] | .InstanceId,.State&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;results in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;i-0a775b8c631e8ad27&amp;quot;
{
  &amp;quot;Code&amp;quot;: 16,
  &amp;quot;Name&amp;quot;: &amp;quot;running&amp;quot;
}
&amp;quot;i-061b358b9cfc20505&amp;quot;
{
  &amp;quot;Code&amp;quot;: 16,
  &amp;quot;Name&amp;quot;: &amp;quot;running&amp;quot;
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;re cooking.&lt;/p&gt;

&lt;p&gt;NOTE: I&amp;rsquo;m going to leave out the aws cli command from here, since really, it&amp;rsquo;s adding no value to the learning and making the scroll-box on your browser ugly.&lt;/p&gt;

&lt;h2 id=&#34;lesson-5&#34;&gt;Lesson 5&lt;/h2&gt;

&lt;h3 id=&#34;is-there-a-way-to-only-get-the-name-and-not-the-code&#34;&gt;Is there a way to only get the &amp;lsquo;Name&amp;rsquo; and not the &amp;lsquo;Code&amp;rsquo;?&lt;/h3&gt;

&lt;p&gt;Funny you should ask that. There sure is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jq &#39;.Reservations[].Instances[] | .InstanceId,.State.Name&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;i-0a775b8c631e8ad27&amp;quot;
    &amp;quot;running&amp;quot;
    &amp;quot;i-061b358b9cfc20505&amp;quot;
    &amp;quot;running&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ooooh&amp;hellip;that&amp;rsquo;s so much better! Simply adding the subkey to the key you want solve this nicely.&lt;/p&gt;

&lt;p&gt;Finally, you may be wondering about the double-quotes. That&amp;rsquo;s going to hinder us later when we&amp;rsquo;re trying to do something useful with this - like put it in a script.&lt;/p&gt;

&lt;p&gt;Using the &amp;lsquo;raw&amp;rsquo; flag ( -r ) for &lt;em&gt;jq&lt;/em&gt; solve that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jq -r &#39;.Reservations[1,3].Instances[] | .InstanceId,.State.Name&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: I slipped something into this last command I&amp;rsquo;ve not talked about. The selection of various elements of the &lt;em&gt;Reservations&lt;/em&gt; array. See it there: &lt;strong&gt;1,3&lt;/strong&gt;? That&amp;rsquo;s saying the second and the 4th elements of this array. Remember JSON arrays are indexed from 0.&lt;/p&gt;

&lt;h2 id=&#34;lesson-6&#34;&gt;Lesson 6&lt;/h2&gt;

&lt;h3 id=&#34;could-we-make-this-all-end-on-the-same-line&#34;&gt;Could we make this all end on the same line?&lt;/h3&gt;

&lt;p&gt;Well, this is something I would like to be able to do.&lt;/p&gt;

&lt;p&gt;There are a couple of ways of doing this. To begin, use the compact ( -c ) flag. This will compact the output, but still, without a little fancy footwork in your &lt;em&gt;jq&lt;/em&gt; expression, it&amp;rsquo;ll not have the desired results.&lt;/p&gt;

&lt;p&gt;To understand this, you should know that the output after the pipe is writing two strings namely &lt;em&gt;InstanceId&lt;/em&gt; and then &lt;em&gt;State&lt;/em&gt;. What we really want to do is combine those outputs into a new string&lt;/p&gt;

&lt;p&gt;We could try this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jq -c &#39;.Reservations[1,3].Instances[] | &amp;quot;.InstanceId, .State.Name&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;however that produces two strings with .InstanceId, .State.Name. Not quite what we want.&lt;/p&gt;

&lt;p&gt;We could use an array to combine these strings into a new array as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jq -c &#39;.Reservations[1,3].Instances[] | [.InstanceId, .State.Name]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which results in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;i-0a775b8c631e8ad27&amp;quot;,&amp;quot;running&amp;quot;]
[&amp;quot;i-061b358b9cfc20505&amp;quot;,&amp;quot;running&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Better. However if we&amp;rsquo;re going to be generating this for some further processing, we&amp;rsquo;re THEN going to have to remove the square braces in the next stage of processing. Not ideal.&lt;/p&gt;

&lt;p&gt;So we could try this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jq -c &#39;.Reservations[1,3].Instances[] | &amp;quot;\(.InstanceId), \(.State.Name)&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This encloses our values in a string, but because we need &lt;em&gt;jq&lt;/em&gt; to see the .InstanceId, etc. we then have to place those inside round braces&amp;hellip;.but, those round braces will be &amp;lsquo;seen&amp;rsquo; by the string, so we need to escape them with a ( \ ) to force the sting not to interpolate them.&lt;/p&gt;

&lt;p&gt;The above command (almost) does what we want. Why almost? Because we&amp;rsquo;ve got the double-quote back again. But we know how to solve that; with the &amp;lsquo;raw&amp;rsquo; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jq -rc &#39;.Reservations[1,3].Instances[] | &amp;quot;\(.InstanceId), \(.State.Name)&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    i-053667d4e26795541, running
    i-0a775b8c631e8ad27, running
    i-06e986e85261c838e, stopped
    i-061b358b9cfc20505, running
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A final example to round things off for today. Say we ALSO want the private IP address of these instances, with fields separated by a colon ( : ).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jq -cr &#39;.Reservations[].Instances[] | &amp;quot;\(.InstanceId): \(.State.Name): \(.PrivateIpAddress)&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;i-053667d4e26795541: running: 172.16.2.26
i-0a775b8c631e8ad27: running: 172.16.2.15
i-06e986e85261c838e: stopped: 172.16.1.10
i-061b358b9cfc20505: running: 172.16.1.13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup. Enough for one day.&lt;/p&gt;
- https://cloud-fundis.github.io/lessons/jq/jq2/ - </description>
        </item>
    
    
    
        <item>
        <title>jq - Lesson N - the N&#39;d game</title>
        <link>https://cloud-fundis.github.io/lessons/jq/lesson-n/</link>
        <pubDate>Tue, 05 May 2020 12:55:16 +0200</pubDate>
        
        <guid>https://cloud-fundis.github.io/lessons/jq/lesson-n/</guid>
        <description>because there are just too many things to remember https://cloud-fundis.github.io/lessons/jq/lesson-n/ -&lt;p&gt;After all your learnings and this series, we&amp;rsquo;re trying to get to understand and write &lt;em&gt;jq&lt;/em&gt; like the one below. It&amp;rsquo;s a culmination of our learnings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;jq &#39;def dotkeys:
	def stringify: map(tostring) | join(&amp;quot;.&amp;quot;);
	. as $in
	| reduce paths(scalars) as $p (null;
		($in|getpath($p)) as $v
		| setpath([$p|stringify]; $v));
	def chain(key):
	.[key] |= dotkeys ;
   chain(&amp;quot;AParticularNestedKey&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup, this looks terrible, even to me. So I&amp;rsquo;m on a quest and hopefully this&amp;rsquo;ll make more sense as these lessons progress.&lt;/p&gt;

&lt;p&gt;But we&amp;rsquo;re not there yet.&lt;/p&gt;

&lt;p&gt;Thanks @doug for this little bit of chicken-scratch.&lt;/p&gt;
- https://cloud-fundis.github.io/lessons/jq/lesson-n/ - </description>
        </item>
    
    
    
        <item>
        <title>jq - first steps: a journey worth taking</title>
        <link>https://cloud-fundis.github.io/lessons/jq/jq1/</link>
        <pubDate>Mon, 04 May 2020 11:32:20 +0200</pubDate>
        
        <guid>https://cloud-fundis.github.io/lessons/jq/jq1/</guid>
        <description>because there are just too many things to remember https://cloud-fundis.github.io/lessons/jq/jq1/ -

&lt;p&gt;When I started at AWS, I&amp;rsquo;d never heard of &lt;em&gt;jq&lt;/em&gt; before. Of course, I&amp;rsquo;d not been exposed to a lot of JSON either, so it&amp;rsquo;s not surprising I didn&amp;rsquo;t know it or how unbelievably powerful it is.&lt;/p&gt;

&lt;p&gt;This is a series of indefinite length that focusts on &lt;em&gt;jq&lt;/em&gt;. Bascially, the man page is way too concise to be terribly helpful. This series will aim to fulfil two roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To give practical examples of using &lt;em&gt;jq&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;To act as a bit of a cookbook for &amp;lsquo;common&amp;rsquo; usecases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you find this useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is &lt;em&gt;jq&lt;/em&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a tool that allows us to manipulate JSON documents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is that so important?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON seems to have been universally adopted by many to define configuration files, output to API calls among other uses.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jq&lt;/em&gt; is a swiss-army knife for dealing with JSON. The better you know it, the easier your JSON life will be.&lt;/p&gt;

&lt;p&gt;For the rest of this series, I&amp;rsquo;m going to be delving into the return information from the AWS CLI. If your CLI config files isn&amp;rsquo;t set to return JSON (instead it returns YAML or something else), then change that. You should use any JSON file you have on hand.&lt;/p&gt;

&lt;p&gt;This is only for Linux. What about Windoze?
I don&amp;rsquo;t care about Windoze. If you want to run &lt;em&gt;jq&lt;/em&gt; on Windoze, Google it.&lt;/p&gt;

&lt;h3 id=&#34;lesson-1&#34;&gt;Lesson 1:&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;jq&lt;/em&gt; can be used on a file or part of a pipe.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jq&lt;/em&gt; to pretty-print your JSON. The period ( . ) is the selector of all fields. In the example, this selects from the highest level of the JSON document.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produces the instances in your account. Not terribly helpful because, of course if there are many of them, there is a lot of JSON returned.&lt;/p&gt;

&lt;p&gt;It did (or should have), coloured your output - which is pretty if nothing else.&lt;/p&gt;

&lt;h3 id=&#34;lesson-2&#34;&gt;Lesson 2:&lt;/h3&gt;

&lt;p&gt;Finding the keys.&lt;/p&gt;

&lt;p&gt;The JSON document is a set of key:value pairs. In our case, if we want to find the keys, we could:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;keys&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will return:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    &amp;quot;Reservations&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s telling me I have instances that are &amp;ldquo;reserved&amp;rdquo; for my use.&lt;/p&gt;

&lt;p&gt;Of course, the converse is the values associated with the &amp;ldquo;Reservations&amp;rdquo; key and are the values (my instances).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;values&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still pretty useless, but at least it&amp;rsquo;s something.&lt;/p&gt;

&lt;p&gt;What about using the Reservations key?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns the same results (pretty much) as &amp;lsquo;values&amp;rsquo; above. But now we&amp;rsquo;re getting the hang of this, what about the &amp;lsquo;next&amp;rsquo; key (i.e. .Reservations.&lt;keys&gt;)?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations | keys&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the pipe character does what you expect it to do in the shell. It&amp;rsquo;s piping the output of .Reservations to the keys keyword. Interestingly, we get this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    0
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does that mean?&lt;/p&gt;

&lt;p&gt;.Reservations is a zero indexed array and in this case, there&amp;rsquo;s only a single element - 0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jq&lt;/em&gt; understands the index, but it ALSO understands an empty array to mean every element in the array as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations[0] | keys&#39;

aws ec2 describe-instances |_jq_&#39;.Reservations[] | keys&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means the zero&amp;rsquo;th element (in this case the .Reservations array only has a single element), or the empty brackets which means every element in the array. Both of these produce the same outcome:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    &amp;quot;Groups&amp;quot;,
    &amp;quot;Instances&amp;quot;,
    &amp;quot;OwnerId&amp;quot;,
    &amp;quot;ReservationId&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are four sub-keys under .Reservations, namely Groups, Instances, OwnerId and ReservationId.&lt;/p&gt;

&lt;p&gt;Taking a flying guess here, I&amp;rsquo;m going to go with the Instances like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations[].Instances&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
  {
    &amp;quot;AmiLaunchIndex&amp;quot;: 0,
    &amp;quot;ImageId&amp;quot;: &amp;quot;ami-02df9ea15c1778c9c&amp;quot;,
    &amp;quot;InstanceId&amp;quot;: &amp;quot;i-0b3dde7ff8612d7b5&amp;quot;,
    &amp;quot;InstanceType&amp;quot;: &amp;quot;t2.micro&amp;quot;,
    &amp;quot;KeyName&amp;quot;: &amp;quot;hamish-cloudfundis-keypair&amp;quot;,
    &amp;quot;LaunchTime&amp;quot;: &amp;quot;2020-01-02T13:47:08.000Z&amp;quot;,
    &amp;quot;Monitoring&amp;quot;: {
      &amp;quot;State&amp;quot;: &amp;quot;disabled&amp;quot;
    },
    &amp;quot;Placement&amp;quot;: {
      &amp;quot;AvailabilityZone&amp;quot;: &amp;quot;eu-west-1c&amp;quot;,
      &amp;quot;GroupName&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;Tenancy&amp;quot;: &amp;quot;default&amp;quot;
      ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The square bracket ( [ ) as the first line gives us a clue that this too (Instances) is an array. How many elements are in this array? That&amp;rsquo;s right, in my case, 0. Let&amp;rsquo;s try that trick from before&amp;hellip;where we used the keys keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 describe-instances | jq &#39;.Reservations[].Instances[] | keys&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And bingo we get something useful finally&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;    [
      &amp;quot;AmiLaunchIndex&amp;quot;,
      &amp;quot;Architecture&amp;quot;,
      &amp;quot;BlockDeviceMappings&amp;quot;,
      &amp;quot;CapacityReservationSpecification&amp;quot;,
      &amp;quot;ClientToken&amp;quot;,
      &amp;quot;CpuOptions&amp;quot;,
      &amp;quot;EbsOptimized&amp;quot;,
      &amp;quot;EnaSupport&amp;quot;,
      &amp;quot;HibernationOptions&amp;quot;,
      ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t have more time today, so that&amp;rsquo;s it for now. Next time, we look at getting values for these things.&lt;/p&gt;
- https://cloud-fundis.github.io/lessons/jq/jq1/ - </description>
        </item>
    
    
    
        <item>
        <title>About</title>
        <link>https://cloud-fundis.github.io/about/</link>
        <pubDate>Wed, 29 Apr 2020 13:09:58 +0200</pubDate>
        
        <guid>https://cloud-fundis.github.io/about/</guid>
        <description>because there are just too many things to remember https://cloud-fundis.github.io/about/ -&lt;p&gt;This is a site for our blog posts. Started mostly it&amp;rsquo;s because I simply forget stuff. I&amp;rsquo;m not at nimble as I once was. Granted, even then I forgot things.&lt;/p&gt;

&lt;p&gt;The official &lt;a href=&#34;https://www.cloud-fundis.co.za&#34;&gt;Cloud-Fundis website&lt;/a&gt; is elsewhere, but this is a companion site (hosted on GithubPages as you can see) and it&amp;rsquo;s mostly for me. However if you find anything here that&amp;rsquo;s wrong, don&amp;rsquo;t hesitate to contact the Cloud-Fundis people on info AT cloud-fundis dot coza.&lt;/p&gt;

&lt;p&gt;Of course, we&amp;rsquo;re prepared to do other posts, so email us if there&amp;rsquo;s something you think may be especially helpful and we&amp;rsquo;ll see what time we have to do a post about it.&lt;/p&gt;

&lt;p&gt;Happy dev-ops-sing&lt;/p&gt;
- https://cloud-fundis.github.io/about/ - </description>
        </item>
    
    
    
        <item>
        <title>New blog posts ... tjoef tjaf</title>
        <link>https://cloud-fundis.github.io/blog/blog-recipe-tjoef-tjaf/</link>
        <pubDate>Wed, 29 Apr 2020 11:33:32 +0200</pubDate>
        
        <guid>https://cloud-fundis.github.io/blog/blog-recipe-tjoef-tjaf/</guid>
        <description>because there are just too many things to remember https://cloud-fundis.github.io/blog/blog-recipe-tjoef-tjaf/ -

&lt;p&gt;Yup, don&amp;rsquo;t have time to muck around. Need to be able to blog about things I learn so that I can use them later.&lt;/p&gt;

&lt;p&gt;I think &lt;em&gt;tjoef-tjaf&lt;/em&gt; is an Afrikaans expression meaning roughly, quick-quick. Here on &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_South_African_slang_words&#34;&gt;Wikipedia&lt;/a&gt; are other &amp;lsquo;real Souf-Afrikan&amp;rsquo; words in common use - like &lt;em&gt;ja-nee&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;In what follows, all my myBlogs live in ~/WorkDocs/cloudfundis/myBlog on my PC, and my githubpages repo is in ~/WorkDocs/cloudfundis/cloud-fundis.github.io - I&amp;rsquo;ll be pushing from here to github&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your blog Hugo metadata and all that junk lives in ~/somedir/myBlog/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If not, then you can use hugo to create a new site in ~/somedir as follows&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;somedir $ hugo new site blog&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Set up an alias in ~/.bash_aliases to make uploading and deployment easier:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;alias buildblog=&amp;lsquo;(cd ~/WorkDocs/cloudfundis/myBlog/; hugo -d ../cloud-fundis.github.io/); (cd ~/WorkDocs/cloudfundis/cloud-fundis.github.io/ &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;ldquo;Blog update&amp;rdquo; &amp;amp;&amp;amp; git push)&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;.bash_aliases is read by .bashrc, so re-sourcing .bashrc sets this up.&lt;/p&gt;

&lt;ol start=&#34;2&#34;&gt;
2. You&#39;ve set up your ssh-keys for github. If not, I&#39;ll post a future post about this elsewhere.
&lt;/ol&gt;

&lt;p&gt;Now, it&amp;rsquo;s time to write a post:&lt;/p&gt;

&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;

&lt;p&gt;Assuming you&amp;rsquo;re in the &lt;strong&gt;myBlog&lt;/strong&gt; directory on your local machine:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;hugo new post blog/tjoef-tjaf.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Creates the page (in content/blog/tjoef-tjaf.md) [I want tjoef-tjaf to be a new &lt;strong&gt;blog&lt;/strong&gt; post on the site]. Edit tjoef-tjaf.md.&lt;/p&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;p&gt;Save it and then, using your alias, rebuild the website using hugo and deploy to github with commit and push&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ buildblog&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visit the site at cloud-fundis.github.io (actually, visit your own github pages site).&lt;/p&gt;

&lt;h2 id=&#34;postscript&#34;&gt;Postscript&lt;/h2&gt;

&lt;p&gt;What can happen is that, because you&amp;rsquo;re pushing new changes to the git regularly, old stuff that you may not still want there, will continue to linger. These problems are difficult to diagnose. As a result, you might just want to scrub everything on your github pagess site and start again. Do this with caution!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git rm -rf &lt;br/&gt;
git commit -m &amp;ldquo;Clean everything with bleach&amp;rdquo;&lt;br/&gt;
git push&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://cloud-fundis.github.io/blog/blog-recipe-tjoef-tjaf/ - </description>
        </item>
    
    
    
        <item>
        <title>Visual Code Studio and Scala</title>
        <link>https://cloud-fundis.github.io/blog/visual-code-and-scala/</link>
        <pubDate>Wed, 29 Apr 2020 08:01:37 +0200</pubDate>
        
        <guid>https://cloud-fundis.github.io/blog/visual-code-and-scala/</guid>
        <description>because there are just too many things to remember https://cloud-fundis.github.io/blog/visual-code-and-scala/ -

&lt;p&gt;This week I am setting up my new laptop - moving off Mac finally and back onto Linux - YAY.&lt;/p&gt;

&lt;p&gt;So one of the things I&amp;rsquo;m getting working is Visual Code Studio and Scala. Sounds easy doesn&amp;rsquo;t it?&lt;/p&gt;

&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;Scalameta&lt;/a&gt; is the extension for Scala on vscode. Install it; but wait, that&amp;rsquo;s not all - there&amp;rsquo;s more.&lt;/p&gt;

&lt;p&gt;Of course you went for &lt;em&gt;Step 1&lt;/em&gt; which was &amp;ldquo;aaah, this is easy, just download the extension and you&amp;rsquo;re done. How hard is that?&amp;rdquo;. It didn&amp;rsquo;t work, but at least you&amp;rsquo;ve completed Step 1. We&amp;rsquo;re starting at Step 2 because step 1 was a fail.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Have you got the correct verion of Java installed?
I installed Java from the Ubuntu repo and while it was 11.0.7-10, it seemed it was giving issues. Despite futsing around with various Metal options, it seemed to not be loading Bloop.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bloop. To the layman (yup, that&amp;rsquo;s me), this is another thing that flummoxed me. It seems it&amp;rsquo;s job is to automagically download the libraries from Maven.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Uninstall java from the Ubuntu repo&amp;rsquo;s and install it via &lt;a href=&#34;https://sdkman.io/&#34;&gt;SdkMan&lt;/a&gt;. That&amp;rsquo;s what the sbt recommends. Do it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;install sdkman&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;curl -s &amp;ldquo;&lt;a href=&#34;https://get.sdkman.io&amp;quot;&#34;&gt;https://get.sdkman.io&amp;quot;&lt;/a&gt; | bash&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Java&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What I don&amp;rsquo;t understand is that this installs as your user, not system-wide; which I can see is going to bite me later!&lt;/li&gt;
&lt;li&gt;sdk list java&lt;/li&gt;
&lt;li&gt;sdk install java 11.0.7.hs-adpt (no, I don&amp;rsquo;t know what these (&lt;em&gt;adpt&lt;/em&gt; and &lt;em&gt;hs&lt;/em&gt;) things mean yet)&lt;/li&gt;
&lt;li&gt;Test java: java -version&lt;/li&gt;
&lt;li&gt;Add JAVA_HOME to your .bashrc&lt;/li&gt;
&lt;li&gt;Remember to re-run your .bashrc (. ~/.bashrc)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-4&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;When you open your .scala or .sbt files, Metal should create two directories namely .bloop and .metals. If .bloop is not created, my experience was that this is a Java problem and bloop is not starting up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check by running:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;ps -elf|grep bloop.Server|sed &amp;rsquo;s/-classpath [^ ]*//g&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, that classpath stuff just complicates life.&lt;/p&gt;

&lt;p&gt;If bloop is not running, revisit the Java version. For this tut, I installed java 11.0.7.hs-adpt as above.&lt;/p&gt;

&lt;h2 id=&#34;final-step&#34;&gt;Final step&lt;/h2&gt;

&lt;p&gt;Now bloop is running, you&amp;rsquo;re still getting this error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;INFO  [error] sbt.librarymanagement.ResolveException: Error downloading org.apache.spark:spark-graphx:2.4.4&lt;br/&gt;
INFO  [error]   Not found&lt;br/&gt;
INFO  [error]   Not found&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I found is that copying the sbt path from Maven didn&amp;rsquo;t work. What Maven suggested I put in my build.sbt was this (snippet):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;libraryDependencies += &amp;ldquo;org.apache.spark&amp;rdquo; % &amp;ldquo;spark-core&amp;rdquo; % &amp;ldquo;2.4.4&amp;rdquo;,&lt;br/&gt;
  libraryDependencies += &amp;ldquo;org.apache.spark&amp;rdquo; % &amp;ldquo;spark-sql&amp;rdquo; % &amp;ldquo;2.4.4&amp;rdquo;&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is not a path because it&amp;rsquo;s being searched for here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;INFO  [error]   not found: /home/hamish/.ivy2/local/org.apache.spark/spark-sql/2.4.4/ivys/ivy.xml&lt;br/&gt;
INFO  [error]   not found: &lt;a href=&#34;https://repo1.maven.org/maven2/org/apache/spark/spark-sql/2.4.4/spark-sql-2.4.4.pom&#34;&gt;https://repo1.maven.org/maven2/org/apache/spark/spark-sql/2.4.4/spark-sql-2.4.4.pom&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which, as you can see, is not found.&lt;/p&gt;

&lt;p&gt;A bit of _curl_ing did the trick:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;curl &lt;a href=&#34;https://repo1.maven.org/maven2/org/apache/spark&#34;&gt;https://repo1.maven.org/maven2/org/apache/spark&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;showed me that the path was in fact not as I&amp;rsquo;ve put it in the dependencies, but rather&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;spark-core_2.10/&amp;quot; title=&amp;quot;spark-core_2.10/&amp;quot;&amp;gt;spark-core_2.10/&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;spark-core_2.11/&amp;quot; title=&amp;quot;spark-core_2.11/&amp;quot;&amp;gt;spark-core_2.11/&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;spark-core_2.12/&amp;quot; title=&amp;quot;spark-core_2.12/&amp;quot;&amp;gt;spark-core_2.12/&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So changing the path in the build.sbt to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;libraryDependencies += &amp;ldquo;org.apache.spark&amp;rdquo; % &amp;ldquo;spark-core_2.12&amp;rdquo; % &amp;ldquo;2.4.4&amp;rdquo;,&lt;br/&gt;
  libraryDependencies += &amp;ldquo;org.apache.spark&amp;rdquo; % &amp;ldquo;spark-sql_2.12&amp;rdquo; % &amp;ldquo;2.4.4&amp;rdquo;&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fixed this.&lt;/p&gt;

&lt;p&gt;Test by writing some Scala and autocomplete should work.&lt;/p&gt;

&lt;p&gt;Time spent figuring this out: half-a-day + 2 hours&lt;/p&gt;
- https://cloud-fundis.github.io/blog/visual-code-and-scala/ - </description>
        </item>
    
    
  </channel>
</rss> 